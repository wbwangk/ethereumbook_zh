////
Source:
https://github.com/ethereum/devp2p/blob/master/rlpx.md#node-discovery
https://github.com/ethereum/wiki/wiki/%C3%90%CE%9EVp2p-Wire-Protocol
https://github.com/ethereum/wiki/wiki/Ethereum-Wire-Protocol
https://github.com/ethereum/wiki/wiki/Adaptive-Message-IDs
License: Not defined yet
Added By: @fjrojasgarcia
////

[[communications_between_nodes]]
== 节点之间的通信 - 简述

以太坊节点之间使用一个简单的有线协议进行通信，形成一个虚拟或覆盖 _well-formed network_ 。
为了实现这个目标，这个协议被称为 *ÐΞVp2p*，使用了诸如 *RLP* 的技术和标准。

[[transport_protocol]]
=== 传输协议
为了提供机密性和防止网络中断， *ÐΞVp2p* 节点使用 *RLPx* 消息，一种加密和认证 _transport protocol_ 。
*RLPx* 利用类似于 *Kademlia* 的路由算法，该算法是用于去中心对等计算机网络的分布式哈希列表 (*DHT*) 。

作为底层传输协议， *RLPx* 允许 _"Node Discovery and Network Formation"_ 。
 *RLPx* 的另一个显着特点是通过单个连接支持 _multiple protocols_ 。

当 *ÐΞVp2p* 节点通过互联网进行通信时（正如他们通常所做的那样），它们使用TCP，它提供了面向连接的媒介，但实际上 *ÐΞVp2p* 节点使用所提供的所谓设施（或消息）由底层传输协议 *RLPx* ，允许它们传送发送和接收数据包。

数据包是 _dynamically framed_ ，以 _RLP_ 编码头为前缀，经过加密和认证。多路复用是通过指定数据包目标协议的帧头实现的。

==== 加密握手
连接通过握手建立，并且一旦建立，数据包就被加密并封装为帧。

这个握手将分两个阶段进行，第一阶段涉及密钥交换，第二阶段将执行验证，并且作为 *DEVp2p* 的一部分，还将交换每个节点的能力。

==== 安全 - 基本考虑因素

所有加密操作都基于 *secp256k1* ，并且每个节点都需要维护一个静态私钥，并在会话之间进行保存和恢复。

在实施加密之前，数据包具有时间戳属性以减少执行重放攻击的时间窗口。
建议接收机只接受最近3秒内创建的数据包。

数据包已签名。验证是通过从签名中恢复公钥并检查它是否与期望值匹配来执行的。

[[devp2p_messages_subprotocols]]
=== ÐΞVp2p消息和子协议
使用 *RLP* 我们可以编码不同类型的有效载荷，其类型由RLP第一个条目中使用的整数值决定。
这样， *ÐΞVp2p* ， _basic wire protocol_ ，支持_任意子协议_。

`0x00-0x10`之间的 _Message IDs_ 保留给 *ÐΞVp2p* 消息。因此， _sub-protocols_ 的消息ID被假定为从`0x10`开始。

不在节点之间共享的子协议是 _ignored_ 。
如果共享相同（相同名称）子协议的多个版本，则 _数字上最高的赢_ 。

==== 通信的基本建立 -  基础ÐΞVp2p消息

作为一个非常基本的例子，当两个对等方发起他们的通信时，每个用一个名为 *“Hello”* 的特殊 *ÐΞVp2p* 消息向另一个问候，这由`0x00`消息ID标识。
通过这个特殊的 *ÐΞVp2p* *“Hello”* 消息，每个对等方都会向其对等方透露相关数据，以便通信从非常基本的层面开始。

在这一步中，每个对等方都会知道以下有关他对等方的信息。

 - P2P协议的实现 *version* 。现在必须是`1`。
 - *客户端软件标识* ，作为人类可读的字符串（例如`Ethereum(++)/1.0.0`）。
 - 对等方 *能力名称* 作为长度为3的ASCII字符串。目前支持的能力名称是`eth`和`shh`。
 - 对等方 *能力版本* 作为正整数。目前支持的版本为`eth`为`34`，`shh`为`1`。
 - 客户端正在监听的 *端口* 。如果`0`表示客户端没有收听。
 - *节点的唯一标识*指定为512位散列 。

==== 断开连接 - 基本ÐΞVp2p消息
要执行有序的断开连接，要断开连接的节点将发送 *ÐΞVp2p* 消息，称为 *“断开连接”* ，该消息由 _“0x01”_ 消息ID标识。此外，节点使用参数 *“reason”* 指定断开的原因。

 *“reason”* 参数可以取值从`0x00`到`0x10`，例如`0x00`表示原因 *“断开请求”* 和`0x04`表示 *“太多的对等方”* 。

==== 状态 - 以太坊子协议示例
这个子协议由`+0x00`消息ID标识。

此消息应在首次握手之后并在任何以太坊相关消息之前发送并通知其当前状态。

为此，节点向对方公开以下数据;

 - *协议版本* 。
 - *网络标识* 。
 - *最好链的总难度* 。
 - *最著名区块的哈希* 。
 - *创世区块的哈希* 。

[[known_current_networks]]
===== 已知的当前网络ID
关于网络ID这里是目前已知的列表。

 -  0： *Olympic* ; 以太坊公开预发布测试网
 -  1： *Frontier* ; Homestead，Metropolis，以太坊公共主要网络
 -  1： *Classic* ; 未分叉公共以太坊经典主网络，链ID 61
 -  1： *Expanse* ; 另一个以太坊实现，链ID 2
 -  2： *Morden* ; 公共以太坊测试网，现在是以太坊经典测试网
 -  3： *Ropsten* ; 公共跨客户端以太网测试网
 -  4： *Rinkeby* ：公众Geth以太坊测试网
 -  42： *Kovan* ; 公众Parity以太网测试网
 -  77： *Sokol* ; 公共POA测试网
 -  99： *POA* ; 权威证明以太坊网络
 -  7762959： *Musicoin* ; 音乐区块链

==== GetBlocks  - 另一个子协议示例
这个子协议由`+0x05`消息ID标识。

有了这个消息，节点就会通过自己的散列向对等节点请求指定的区块。

请求节点的方法是通过一个包含它们的所有哈希的列表，将消息表示为以下形式;
....
[+0x05: P, hash_0: B_32, hash_1: B_32, ...]
....

请求节点不能有包含所有请求区块的响应消息，在这种情况下，它必须再次请求那些没有被对等方发送的响应消息。

=== 节点身份和声誉
*ÐΞVp2p* 节点的标识是一个 *secp256k1* 公钥。

客户端可以自由地标记新节点，并使用节点ID作为 _决定节点声誉_ 的手段。

他们可以存储给定ID的评级并相应地给予优先。
