== 以太坊是什么？

以太坊是一个开源的去中心化计算基础架构，可执行称为*智能合约的*程序。它使用区块链来同步并存储系统*状态*，使用称为*ether*的加密货币来计量和约束执行的资源损耗。

以太坊平台使开发人员能够利用内置的经济功能构建强大的应用程序。此外，它还提供持续正常运行能力，并消除审查、第三方干扰和交易方风险等问题。

=== 与比特币相比

////
一些读者就像Vitalik一样有比特币的经验，会发现比较两个系统的动机和设计决策很有用
////

为什么不是比特币？比特币是非图灵完备的堆栈语言，不够灵活，表达力不足，无法构建各种应用程序，只是特定于货币交易领域的应用程序。

以太坊是构建应用程序的通用区块链。始于2014年的夏天 - 是每个应用程序的区块链。开发人员不得不担心基础平台，而不是关注他们的应用。与早年的计算相同。通过拥有一个通用的标准、灵活的平台，开发人员可以构建他们的应用程序，而不必担心平台的细节（太多，理想）。

=== 以太坊如何解决这个问题

它是高级别、表达灵活的语言，抽象出了安全模型、区块链机制、共识算法的细节。

=== 以太坊的历史

到2013年底，年轻程序员和比特币爱好者Vitalik Buterin开始考虑进一步扩展比特币和Mastercoin（一种扩展比特币以提供基本智能合约的叠加协议）的功能。2013年10月，Vitalik向Mastercoin团队提出了一个更为通用的方法，该方案允许用灵活的脚本化（但不是图灵完备的）合约来取代Mastercoin的专业合约语言。虽然给万事达币团队留下了深刻的印象，但这一提议过于激进，无法适应他们的发展路线图。

2013年12月，Vitalik开始分享一份“白皮书”，其中概述了以太坊背后的想法：图灵完备的可编程和通用区块链。几十个人看到了这个早期草案，并开始向Vitalik提供反馈，帮助他逐渐形成提案。

这本书的两位作者都评论了这个早期的草稿。Andreas M. Antonopoulos作为“让我们谈比特币”播客的主持人获得了副本。Andreas对这个想法很感兴趣，并向Vitalik询问了很多关于使用单独的区块链来强化智能合约执行的共识规则，以及图灵完备语言的影响的问题。Andreas持续关注以太坊的进步，但他在写“掌握比特币”一书时以太坊尚处于早期阶段，直到很久以后才直接参与以太坊。

然而，本书的另一位作者Gavin Wood博士是第一批接触Vitalik的人之一，以C ++编程技能提供帮助，并成为以太坊的联合创始人、联合设计师和CTO。

正如Vitalik在他的 http://vitalik.ca/general/2017/09/14/prehistory.html[“史前以太坊史”] 一文中所述：

当时的以太坊协议完全是我自己的创作。然而，从这里开始，新的参与者开始加入。到目前为止在协议方面最突出的是Gavin Wood。

...

以太坊在视觉方面的微妙变化都可以归功于Gavin，从构建可编程货币平台（用基于区块链的合约保存数字资产并根据预先设定的规则将其转移），到通用计算平台。这始于重点和术语的细微变化，随着对“Web 3”集合的日益重视，这种影响变得更加强烈，这种集合将以太坊看作是一套去中心技术的组成部分，另外两个是Whisper和Swarm。

从2013年12月开始，Vitalik和Gavin完善并发展了这个想法，共同构建了成为以太坊的协议层。

就像Satoshi一样，Vitalik和Gavin不仅仅发明了一种新技术，他们以新颖的方式将新发明与现有技术结合起来，并提供了原型代码以向世界证明他们的想法。

以太坊诞生了。

****
Vitalik Buterin的文章“以太坊史前史”于2017年9月出版，提供了以太坊最早时刻的迷人第一人称视角。

你可以在 http://vitalik.ca/general/2017/09/14/prehistory.html 阅读它
****

=== 智能合约
////
Perhaps a reference to the "Smart Contract" chapter can be added here, showing that all of these concepts will be expanded
////

什么是智能合约？既不是合约也不聪明。他们是程序。

这些程序允许根据特定行动自动执行不同的操作，这些操作可以移动资金（以太币）或改变自定义结构中的网络状态。通过利用这些功能，协作式智能合约的联合可以允许按不同发行策略创建新代币，按各方协定强制执行某些条件，甚至可以作为分布式游戏的平台等等。

程序员的观点 - 与其他平台相比，以太坊有什么不同

以太坊提供非常熟悉的编程语言、开发框架和执行平台。Solidity是使用的主要语言，也很流行，但有已存在或正在开发的替代语言。

双刃剑 - 语言显得简单，也要考虑平台安全的抽象。在实践中，用这种语言编写安全代码非常困难，需要了解涉及并发性、重入性和分布式系统的安全设计模式。发展快速，而且没有被很好地理解。错误的安全观会导致损失。

[警告]
====
“攻击面”是一个概念，意味着软件可能遭受的不同方向的攻击。考虑到以太坊编程功能的完备性和灵活性，与比特币的特定智能合约相比，攻击面扩大了，并且在平台上开发时需要考虑。
====

==== Solidity

Solidity是智能合约的编程语言，它受C ++、Python和JavaScript的影响，被设计用于以太坊虚拟机（EVM）。

==== 其他高级语言

==== EVM字节码。

与高级语言的关系

=== 开发文化

文化是快速创新、打破常规。

=== 为什么要学习以太坊

==== 更一般地了解区块链

==== 跨学科能力：加密、分布系统、区块链、编译器、安全

==== 适合更广泛的开发团队

UX、Devops、系统、网络、安全和..你！

=== 这本书将教你什么

这本书包含什么内容：

以太坊如何运作，如何使用以太坊作为平台进行编程。

从一个简单的合约，直到它在EVM中的运行方式，然后再次备份。

=== 你需要知道的

不需要理解JavaScript。编程经验将会非常有帮助，但不一定需要理解其中的一些概念
