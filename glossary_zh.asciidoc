[preface]
== 快速词汇表

这个快速词汇表包含许多与以太坊相关的术语。这些术语在本书中都有使用，因此请在此处加上书签以供快速参考。

////

请在这里添加条款，做一个拉请求！

如果您无法编写定义，请执行拉取请求以仅添加您认为应该定义的字词，并将该定义留空以供其他人稍后添加。

Comment from Gitter:
    Andreas M. Antonopoulos @aantonop mar. 26 19:42 (2018)
    Capitalize ALL THE WORDS
////

账户::
    包含地址、余额和nonce的对象，以及可选的存储和代码。账户可以是合约账户或EOA（外部拥有账户）。

地址::
    一般来说，这代表一个EOA或合约，它可以在区块链上接收（目标地址）或发送（源地址）交易。更具体地说，它是ECDSA公钥的Keccak散列的最右边的160位。

断言::
    在Solidity断言(false)中编译为 *0xfe* ，这是一个无效的操作码，用尽所有剩余的燃料，并恢复所有更改。
    当assert()语句失败时，应该发生一些非常错误和意外的事情，您需要修复代码。
    你应该使用断言来避免永远不可能的条件。

Big-endian::
    位置数字表示，其中最大的有效数字排第一位。与最小有效数字第一位的little-endian相反。

BIP ::
    比特币改善建议。比特币社区成员提交的一组提案，旨在改进比特币。例如，BIP-21是改进比特币统一资源标识符（URI）方案的建议。

区块::
    一个区块被矿工添加到以太坊网络中，是一个关于所包含交易的所需信息（一个区块头）和一组称为ommers的其他区块头的集合。

区块链::
	由工作证明系统验证的一系列区块，每个区块都连接到它的前任一直到创世区块。这与比特币协议的不同之处在于它没有区块大小限制，而是使用变化的燃料限制。

Byzantium::
  Byzantium是Metropolis开发阶段的两大分叉之一。它包括EIP-649：Metropolis难度炸弹延迟和区块奖励下降，其中冰河时代（见下文）延迟1年，而区块奖励从5减至3以太币。

编译::
	将用高级编程语言（例如Solidity）编写的代码转换为较低级别的语言（例如EVM字节码）。

共识::
    当几个节点（通常是网络上的大多数节点）在其本地验证的最佳区块链中都具有相同的区块时。
    不要与共识规则混淆。

共识规则::
    完整节点遵循的区块验证规则与其他节点保持一致。不要与共识混淆。

Constantinople::
  Metropolis阶段的第二部分计划在2018年中期。预计将包括切换到混合工作量证明/权益证明共识算法以及其他更改。

合约账户::
    包含代码的账户，每当它从另一个账户（EOA或合约）收到交易时执行。

合约创建交易::
	一个特殊的交易，以“零地址”作为接收人，用于注册合约并将其记录在以太坊区块链中（请参阅“零地址”）。

DApp::
    去中心的应用程序。至少，它是一个智能合约和一个web用户界面。更广泛地说，DApp是一个基于开放式、去中心、点对点基础架构服务的Web应用程序。另外，许多DApp包括去中心存储和（或）消息协议和平台。

DAO ::
  去中心的自治组织。没有等级管理的公司和其他组织。也可能是指2016年4月30日发布的名为“The DAO”的合约，该合约于2016年6月遭到黑客入侵，导致了在1,192,000个区块的硬分叉（代号DAO），该硬分叉扭转了被盗用的DAO合约并导致分成了以太坊和以太坊经典两个竞争系统。

Deed::
  ERC721提案中引入了不可替代的token标准。与ERC20 token不同，Deed证明了所有权并且不可互换，虽然它们在任何管辖区都不被认为是“法律文件”，至少目前不是。

难度::
  一个网络范围的设置，控制需要多少计算来产生工作量证明。

电子签名::
  数字签名算法是一个过程，通过该过程，用户可以使用私钥生成称为文档“签名”的短字符串数据，以便具有相应公钥、签名和文档的任何人都可以验证：（1）该文件由该特定私钥的所有者“签名”，并且（2）文件在签署后没有改变。

ECDSA ::
    椭圆曲线数字签名算法或ECDSA是以太坊用来确保资金只能由其合法所有者使用的加密算法。

EIP ::
    以太坊改进建议是以太坊平台的标准。EIP是向以太坊社区提供信息的设计文档，描述了新功能或其过程或环境。有关更多信息，请参阅https://github.com/ethereum/EIPs （另请参阅下面的ERC定义）。

熵(Entropy)::
    在密码学中，指缺乏可预测性或随机性水平。在生成秘密信息（如主私钥）时，算法通常依赖高熵源来确保输出不可预测。

ENS ::
  以太坊名称服务。有关更多信息，请参阅https://github.com/ethereum/ens/

EOA ::
    外部拥有账户。这些账户是由以太坊网络的人类用户创建或为其创建。

ERC ::
    以太坊请求评论。一些EIP被标记为ERCs，这表示试图定义以太坊使用的特定标准的建议。

//我们应该使用版本号还是版本名称？
Ethash ::
    以太坊1.0的工作量验证算法。有关更多信息，请参阅https://github.com/ethereum/wiki/wiki/Ethash

以太币(Ether)::
    以太币是以太坊生态系统使用的原生加密货币，包括执行智能合约时的燃料成本。它的符号是Ξ，希腊字母Xi的大写。

事件::
    一个事件允许使用EVM日志记录工具，随后可以用来在DApp的用户界面中“调用”JavaScript回调，这些用户界面监听这些事件。有关更多信息，请参阅http://solidity.readthedocs.io/en/develop/contracts.html#events

EVM ::
    以太坊虚拟机。EVM是一个简单的基于堆栈的架构。在以太坊中，执行模型指定了如何在给定一系列字节码指令和少量环境数据的情况下改变系统状态。
    这是通过称为以太坊虚拟机（EVM）的虚拟状态机的正式模型来指定的。

EVM汇编语言::
    EVM代码的人类可读形式。

回退(Fallback)函数::
    这就像一个捕鱼网捕捉所有送到合约的以太币。

Faucet(水龙头)::
  一个网站，对于想要在测试网上进行测试的开发者免费发放测试以太币。

Frontier::
  以太坊的初始测试开发阶段，从2015年7月30日至2016年3月。

Ganache::
  个人以太坊区块链，您可以使用它来运行测试，执行命令并检查状态，同时控制链的运行方式。

//这里的货币可能会与Ether发生冲突。
//

TODO：改变清晰度

//
燃料::
    以太坊用于执行智能合约的虚拟燃料。以太坊虚拟机使用记账机制来计量燃料的消耗量并限制（限制）计算资源的消耗。参见图灵完备。
    燃料是执行智能合约的每条指令产生的计算单位。燃料与以太币加密货币挂钩。燃料类似于蜂窝网络上的通话时间。因此，以法定货币进行交易的价格是`gas * (ETH/gas) * (法币/ETH)`。

燃料限制::
  在谈论区块时，他们也有一个名为燃料限制的字段。它定义了整个区块中所有交易允许消耗的最大燃料量。

创世区块::
	区块链中的第一个区块，用于初始化特定网络及其加密货币。

Geth::
  Go以太坊。用Go编写的以太坊协议最重要的实现之一。

硬分叉::
  硬分叉也称为硬分叉变更，是区块链中的一种永久性分歧，通常发生在未升级的节点无法验证由遵循新的共识规则的升级节点创建的区块时。不要与分叉、软分叉、软件分叉或Git分叉混淆。

哈希::
   以可变长度输入，由哈希函数生成的固定长度指纹。

HD钱包::
    使用分层确定性（HD Protocol）密钥创建和传输协议（BIP32）的钱包。

////

TODO为了清晰起见而改变

////
HD钱包种子::
    HD钱包种子或根种子是一种potentially-short值，用作生成HD钱包的主私钥和主链代码的种子。钱包种子可以用助记词表示，这使得人们更容易复制、备份和恢复私钥。

Homestead::
  以太坊的第二个开发阶段，2016年3月在1,150,000区块启动。

冰河世纪::
  一个以太坊硬分叉，在200,000的区块引入指数难度增加（又名难度炸弹），使激励过渡到权益证明。

//在以太坊的情况下，也许还包括区块链浏览器？
IDE（集成开发环境）::
	集成的用户界面，结合了代码编辑器、编译器、运行时和调试器。

不可变的部署代码问题::
  一旦部署了合约（或库）的代码，它就变得不可变。能够修复可能的错误并添加新功能是软件开发周期的关键。这对智能合约开发来说是一个挑战。

互通客户端地址协议（ICAP）::
  以太坊地址编码与国际银行帐号（IBAN）编码部分兼容，为以太坊地址提供多功能，校验和互操作编码。ICAP地址可以编码以太坊地址或通过以太坊名称注册表注册的常用名称。他们总是从XE开始。目标是引入一个新的IBAN国家代码：XE，以X扩展以太坊的E前缀，用于非管辖性货币（例如XBT，XRP，XCP）。

内部交易（也称为“消息”）::
    从合约账户发送到另一个合约账户或EOA的交易。

Keccak256 ::
  以太坊中使用的密码散列函数。Keccak256被标准化为SHA-3。

密钥派生函数（KDF）::
  也称为密码扩展算法，它被密钥库格式使用，以防止对密码加密的暴力破解、字典或彩虹表攻击。它重复哈希密码。

密钥库文件::
  包含单个（随机生成的）私钥的JSON编码文件，通过密码加密以提高安全性。

LevelDB ::
  LevelDB是一个开源的磁盘键值存储。LevelDB是一个轻量级的单用途库，用于与许多平台绑定的持久性。

Library（库）::
  以太坊的库（Library）是一种特殊类型的合约，没有收付款函数，没有回退函数，也没有数据存储。因此，它不能接收或保存以太币或存储数据。一个库是预部署的代码，供其他合约调用，用于只读计算。

轻量级客户::
  一个轻量级客户端是一个以太坊客户端，它不存储区块链的本地副本，或者验证区块和交易。它提供钱包的功能，并可以创建和广播交易。

////

TODO：提供清晰的定义

////

默克尔帕特里夏树::

消息::
    一个永远不会被序列化的内部交易，只会在EVM内发送。

Metropolis::
  Metropolis是2017年10月推出的以太坊的第三个开发阶段。

METoken ::
  Mastering Ethereum Token。一个在本书中用于演示的ERC20标记。

矿工::
    一个网络节点，通过重复哈希来找到新区块的有效工作量证明。

Mist::
  Mist是以太坊基金会创建的第一个支持以太坊的浏览器。它还包含一个基于浏览器的钱包，这是ERC20令牌标准的首次实施（Fabian Vogelsteller，ERC20的作者也是Mist的主要开发人员）。Mist也是第一个引入驼峰校验和（EIP-155，参见<< eip-155 >>）的钱包。Mist运行一个完整的节点，并提供完整的DApp浏览器，支持基于Swarm的存储和ENS地址。

网络::
    将交易和区块传播到每个以太坊节点（网络参与者）的对等网络。

节点::
    参与对等网络的软件客户端。

nonce::
    在密码学中，术语nonce用于指代只能使用一次的值。以太坊使用两种类型的随机数。

     - 账户随机数 - 这仅仅是一个账户的交易计数。
     - 工作证明随机数 - 区块中用于获得满意工作证明的随机值（取决于当时的难度）。

Ommer ::
    没有后代的区块。当矿工发现有效区块时，另一矿工可能已经发布了一个竞争性区块，并将其添加到区块链的顶端。与比特币不同的是，以太坊中的孤立区块可以被新区块包含为ommers并获得部分区块奖励。术语“ommer”是父节点的同胞的中性术语，但也被称为“叔叔”。

瘫痪问题::
  加密货币密钥管理的一个通用强大方法是多重交易，更一般地称为秘密共享。
  但是，如果其中一个共享密钥丢失会发生什么？结果将是所有资金的完全丢失。+
  这不是唯一不好的情况。关键股东也可能有不同的想法，应该如何花钱，而不能达成协议。+
  我们使用术语 _Paralysis Problem_ 来表示任何这些尴尬的情况。

瘫痪证明系统::
  瘫痪证明有助于解决加密货币中普遍存在的密钥管理问题。请参阅*瘫痪问题*。+
  瘫痪证明系统可以容忍在玩家不能一致行动的环境中的系统瘫痪。+
  使用智能合约，以太坊可以相对容易地实现瘫痪证明系统。

Parity::
  以太坊客户端软件最突出的互操作实现之一。

权益证明::
    权益证明（PoS）是加密货币区块链协议旨在实现分布式共识的一种方法。权益证明要求用户证明一定数量的加密货币（网络中的“权益”）的所有权，以便能够参与交易验证。

工作量证明::
    一份需要大量计算才能找到的数据（证明）。在以太坊，矿工必须找到符合网络难度目标的Ethash算法的数字解决方案。

收据（Receipt）::
    以太坊客户端返回的数据表示特定交易的结果，包括交易散列、区块编号、使用的燃料量以及（如果部署智能合约时）合约地址。

重入攻击::
  当攻击者合约调用Victim合约函数时，可以复制这种攻击，让我们称它为victim.withdraw()，在原始调用合约函数完成之前，再次调用victim.withdraw()方法继续递归地调用它自己。
  这个递归调用可以通过攻击者合约的回退函数实现。
  攻击者必须执行的唯一技巧是在用完燃料之前中断递归调用，并避免被盗以太币被还原。

[require-sentence]
Require::
    在Solidity中，require(false)编译为 *0xfd* ，它是 *REVERT* 操作码。REVERT指令提供了一种停止执行和恢复状态更改的方式，不需要消耗所有提供的燃料并且能够返回原因。+
    应使用require函数来确保满足有效条件（如输入或合约状态变量），或者验证从调用到外部合约的返回值。+
    在 *Byzantium* 网络升级之前，有两种实际的方式来恢复交易：耗尽燃料或执行无效指令。这两个选项都消耗了所有剩余的燃料。+
    当你在 *Byzantium* 网络升级之前的 *黄皮书* 中查找此操作码时，您无法找到它，并且因为该操作码没有规范，所以当EVM到达它时，会抛出一个 _invalid opcode error_ 。+

还原::
    当需要处理与 <<require-sentence, require()>> 相同类型的情况时，使用revert()，但使用更复杂的逻辑。
    例如，如果你的代码有一些嵌套的if/else逻辑流程，你会发现使用 <<require-sentence, require()>> 而不是require()是有意义的。

奖励::
    一个以太币（ETH）计量的数量，包含在每个新区块中，作对网络中找到工作证明答案的矿工的奖励。

递归长度前缀（RLP）::
    RLP是一种编码标准，由以太坊开发人员设计，用于对具有任意复杂性和长度的对象（数据结构）进行编码和序列化。

Satoshi Nakamoto ::
    Satoshi Nakamoto是设计比特币的人或人们的名字，并创建了它的原始参考实现比特币核心。作为实现的一部分，他们还设计了第一个区块链数据库。在这个过程中，他们率先解决了数字货币的双重支付问题。他们的真实身份仍然未知。

Singleton::
////
TODO：添加定义
////

Vitalik Buterin ::
    Vitalik Buterin是俄罗斯-加拿大的程序员和作家，主要以以太坊的联合创始人和比特币杂志的联合创始人著称。

Gavin Wood::
    Gavin Wood是英国程序员，是以太坊的联合创始人兼前CTO。2014年8月，他提出了Solidity，一种用于编写智能合约的面向合约的编程语言。

密钥（又名私钥）::
    用于生成数字签名（请参阅公共密钥、地址、ECDSA），允许以太坊用户证明账户或合约的所有权的秘密数字。

SHA ::
    安全散列算法或SHA是美国国家标准与技术研究院（NIST）发布的一系列加密散列函数。

SELFDESTRUCT操作码::
  只要整个网络存在，智能合约就会存在并可执行。如果它们被编程为自毁或使用委托调用或调用代码执行该操作，它们将从区块链中消失。
  一旦执行自毁操作，存储在合约地址处的剩余以太币被发送到另一个地址，并且存储和代码从该状态中移除。
  尽管这是预期的行为，但自毁合约的修剪可能会或可能不会被以太坊客户实施。
  SELFDESTRUCT之前称为SUICIDE，通过EIP6，SUICIDE更名为SELFDESTRUCT。

Serenity::
  以太坊的第四个也是最后一个开发阶段。Serenity尚未有计划的发布日期。

Serpent::
	语法类似于Python的过程式（命令式）编程语言。也可以用来编写函数式（声明式）代码，尽管它并不完全没有副作用。很少使用。首先由Vitalik Buterin创建。

////
TODO：可以改进
////

智能合约::
  一个在以太坊的计算基础设施上执行的程序。

Solidity::
	一种程序性（命令式）编程语言，其语法类似于JavaScript、C++或Java。以太坊智能合约中最流行和最常用的语言。最初由Gavin Wood（本书的合著者）创作。

Solidity inline assembly ::
   内联汇编包含使用EVM汇编的Solidity中的代码，可以将其视为EVM代码的人类可读形式。内联汇编试图解决编写手动汇编时遇到的固有难题和其他问题。

Spurious Dragon ::
  在＃2,675,00块硬分叉来解决更多的拒绝服务攻击媒介，以及另一种状态清除。此外，重放攻击保护机制。

Swarm::
  一个去中心（P2P）存储网络。它与Web3和Whisper一起用于构建DApps。

Tangerine Whistle::
  在#2,463,00区块的硬叉改变某些IO运算的燃料计算，并从拒绝服务攻击中清除累积状态，这种攻击利用了这些操作的低燃料成本。

Testnet ::
  一个测试网络（简称testnet）用于模拟以太坊主要网络的行为。

交易::
  提交到以太坊区块链的数据，由发起账户签署并以一个特定地址为目的地。交易包含元数据，例如交易的燃料限额。

Truffle::
  一个最常用的以太坊开发框架。它由多个NodeJS软件包组成，可以使用节点软件包管理器（NPM）进行安装。

////

TODO：提供清晰的定义

////
图灵完备::
  在计算理论中，如果数据操纵规则（如一个计算机的指令集、一个编程语言或一个单元机器人）可用于模拟任何图灵机，则该系统被认为是图灵完备或计算通用的。这个概念是以英国数学家和计算机科学家阿兰图灵命名的。

Vyper::
  一种高级编程语言，类似于使用Python语法的Serpent。旨在接近纯函数语言。首先由Vitalik Buterin创建。

钱包::
    保存你的所有密钥的软件。用作访问和控制您的以太坊账户并与智能合约交互的界面。请注意，密钥不需要存储在您的钱包中，并且可以从脱机存储（例如USB闪存驱动器或纸张）中检索，以提高安全性。尽管有这个名字，但钱包永远不会存储实际的硬币或代币。

WEB3 ::
  web的第三个版本。Web3首先由Gavin Wood提出，代表了Web应用程序的一个新愿景和焦点：从集中拥有和管理的应用程序到基于去中心协议的应用程序。

Wei::
  以太币的最小面额。10^18^ wei = 1 以太币。

Whisper::
  一个去中心（P2P）消息传递服务。它与Web3和Swarm一起用于构建DApps。

零地址::
  一个特殊的以太坊地址，全部20字节为零，在“合约创建交易”中被指定为目的地地址。
