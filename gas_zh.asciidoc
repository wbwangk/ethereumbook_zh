[[gas]]
== 燃料(Gas)

由于程序需要计算“工作”才能执行某个操作或一组操作，因此执行智能合约代码和在以太坊区块链上进行交易会产生相关成本。该成本与正在执行的计算步骤的类型和数量有关。与只考虑交易规模（kB）的比特币交易费用相比，以太坊交易费用必须考虑可以通过智能合约代码执行的任意数量的计算步骤。程序执行的操作数越高，运行完成的成本就越高。**燃料(Gas)**是以太坊用于测量程序执行一个动作或一组动作所需的计算“工作量”的单位。交易或合约执行的每项操作都会花费一定数量的燃料。

对每个操作，分配一定量的燃料。以太坊黄皮书的一些例子：

* 两个数字相加需要3个燃料
* 计算Keccak256哈希值时，需要30个燃料 + 每处理256位数据6个燃料
* 发送一个交易花费21000个燃料

燃料是以太坊防御拒绝服务攻击的重要组成部分。为了防止网络中的意外或恶意无限循环或其他计算浪费，每笔交易的发起人都需要设定他们愿意花费在燃料上的数量限制。因此，燃料系统可以阻止攻击者发送垃圾交易，因为他们必须按比例支付他们消耗的计算资源、带宽和存储资源。

=== 停滞问题

交易费用和记账理念似乎很实用，但您可能会想知道为什么以太坊首先需要燃料。燃料是关键，因为它不仅关注停滞问题，而且对于安全和活跃也至关重要。什么是停滞问题、安全性和活力，为什么你应该关心？

=== 支付燃料

虽然燃料有价格，但它不能被“拥有”或“花费”。燃料仅存在于以太坊虚拟机（EVM）内部，作为正在执行多少计算工作的计数。发起人收取以太币交易费用，然后转换为燃料，然后回到以太币作为矿工的块奖励。这些转换步骤是为了将计算价格（与“工作量”相关联）与以太币价格（与市场波动相关）分开。

==== 谁支付燃气费？

////
TODO
////

如果交易是从外部拥有账户（EOA）发送的，则燃料费将从EOA的余额中提取。换句话说，交易的发起人正在为燃料付款。发起人资助交易消耗的总燃料以及随后的任何次级执行。这意味着如果发起人X附加1000个燃料呼叫合约A，计算500个燃料，然后发送另一个消息给合约B，则A用来发送信息给B的燃料也从X开始时的燃料限制中扣除。

```
EOA账户X启动交易并在合约账户A上调用函数，附加1000个燃料

合约A在计算上花费了500个燃料，并向合约B发送了一个消耗100个燃料的消息

合约B在计算时花费300燃料并完成交易。

100燃料退还给X
```

因此，如果交易的发起人在开始时没有附加足够高的燃料费用，那么执行交易中的一部分业务的中间合约（例如，在我们的示例中为合约A）在理论上可能耗尽燃料。如果燃料合约执行完毕，所有状态改变都会恢复，除了燃料费用支付。

==== 谁用燃料收费？

该费用将被添加到矿工的EOA账户中。

=== 燃料成本与燃料价格

虽然**燃料成本**是衡量EVM执行的操作步骤，但燃料本身也具有以以太币计的**燃料价格**。在进行交易时，发送者指定他们愿意为每个单位燃料支付的燃料价格（以以太币计），从而允许市场决定以太币价格和计算运营成本之间的关系（以燃料计量） 。

`所用燃料总量 * 燃料价格 = 交易费用`按以太币

该金额在交易执行开始时从发起人账户中扣除。发送方应设置一个**燃料限制**，而不是“使用的全部燃料”，该限制应足以覆盖执行交易所需的燃料量。

=== 燃料成本限制和用完燃料

发送交易之前，发起人必须指定**燃料限制**  - 他们愿意购买的最大燃料量。他们还必须指定**燃料价格**  - 他们愿意为每单位燃料支付的以太币价格。

在交易执行开始时，从发起人帐户中扣除以以太币为单位的“燃料限额*燃料价格”作为存款。这是为了防止发起人在执行中“破产”并且无法支付燃气费用。由于这个原因，用户也无法设置超出帐户余额的燃料限制。

如果使用的燃料超过指定的燃料限制，即如果在执行期间交易“运行中耗尽燃料”，则操作终止。虽然交易不成功，但由于矿工已经完成了计算工作，发起人不会收回他们的交易费用，因此这样做会得到补偿。

如果发起人指定的燃料限制高于所使用的燃料，会将超额返还给他们，因为矿工只会为他们实际执行的工作获得补偿。

在这种情况下：

`（燃料限制 - 多余的燃料）* 燃料价格`的以太币作为区块奖励给矿工

`多余的燃料 * 燃料价格`的以太币将退还给发起人

=== 估计燃料
////
TODAO
////

=== 燃料价格和交易优先级

燃料价格是交易发送者愿意为每个使用的燃料支付的以太币金额。挖掘下一个区块的矿工可以决定包含哪些交易。由于将燃料价格考虑在交易费用中作为奖励，因此他们更有可能首先包含燃料价格最高的交易。如果发送者将燃料价格设置得太低，他们可能需要等很长时间才能将其交易成块。

矿工也可以决定交易包括在一个区块中的顺序。由于多个矿工正在竞争将区块附加到区块链中，因此区块内的交易顺序由“获胜”矿工任意决定，然后其他矿工根据该顺序进行验证。尽管来自不同账户的交易可以被任意排序，但是来自个人账户的交易按照自动递增的nonce的顺序执行。

=== 区块燃料限制

区块燃料限制是区块中允许的最大燃料量，用于确定区块中可以容纳多少交易。例如，假设我们有5笔交易，每笔交易的燃料限额为10、20、30、40和50。如果区块燃料限额为100，则头四笔交易可以适合该区块，而交易5必须等待未来的区块。如前所述，矿工决定在一个区块中包含哪些交易。一个不同的矿工可以尝试包括区块中的最后2笔交易（50 + 40），并且他们只有空间来包含第一笔交易（10）。如果您尝试包括需要比当前阻止燃料限制更多的燃料的交易，它将被网络拒绝，您的以太坊客户会给您提示“交易超过阻止燃料限制”。在写作的时候按 https://etherscan.io ，当前的区块燃料限制是500万燃料，意味着每个区块大约可以容纳每个消耗21000燃料的238个交易。

=== 谁决定什么是区块燃料限制？

网络上的矿工决定什么是区块燃料限制。想要在以太坊网络中开采的个人使用采矿程序，例如ethminer，它连接到geth或Parity以太坊客户端。以太坊协议有一个内置的机制，在这种机制中，矿工可以对燃料限制进行投票，因此可以增加容量，而无需在硬叉上进行协调。一个区块的矿工可以在任一方向上将区块燃料限制调整1/1024（0.0976％）。这样做的结果是根据当时网络需求调整块大小。这种机制与默认的采矿策略相结合，在这种策略中，矿工将对燃料限制进行投票，该燃料极限至少为470万，但如果该数量较高，则该目标将使用最近（1024块指数移动）平均燃料的150％，允许容量有序增加。矿工可以选择改变这个值，但很多矿工使用默认值。

=== 燃料退还
以太坊通过退还一半的燃料成本来鼓励删除存储变量。
EVM中有两个负值燃料的操作：

清除合约是 -24,000（SELFDESTRUCT）
清除存储是 -15,000（SSTORE [x] = 0）

==== GasToken

GasToken是符合ERC20标准的令牌，允许任何人在燃料价格较低时“储备”，然后在燃料价格较高时使用燃料。通过将其作为可交易资产，它实质上创造了一个燃料市场。
它利用了前面介绍的燃料退还机制。

您可以通过 https://gastoken.io/ 学习计算盈利能力的数学方法以及如何使用已发布的燃料

=== 租费
目前在以太坊社区提出了一项建议，要求对智能合约收取“租金”以保持活力。

在没有支付租金的情况下，智能合约将被置于“睡眠”状态，即使对于简单的阅读，也无法访问数据。睡觉的合约需要通过支付租金并提交梅克尔证明来唤醒。

https://github.com/ethereum/EIPs/issues/35
https://ethresear.ch/t/a-simple-and-principled-way-to-compute-rent-fees/1455
https://ethresear.ch/t/improving-the-ux-of-rent-with-a-sleeping-waking-mechanism/1480
