= 开发工具、框架和库

== 框架

框架可以用来简化开发。通过自己做所有事情，你可以更好地理解所有事物如何结合在一起，但这是一项繁琐的工作，而且大多数情况下一遍又一遍地做同样的事情。这些框架可以自动完成这些任务中的一部分，使开发变得轻而易举。

=== Truffle

Github链接; https://github.com/trufflesuite/truffle

网站链接; https://truffleframework.com

文件链接; https://truffleframework.com/docs

+npm+ 包存储库链接; HTTPS：//www.npmjs.com/package/truffle


[[installing_truffle]]
==== 安装Truffle框架

Truffle框架由多个 +NodeJS+ 包组成。在我们安装 +truffle+ 之前，我们需要有一个 +NodeJS+ 和Node Package Manager (+npm+) 的最新工作安装。

建议安装 +NodeJS+ 和 +npm+ 的方法是使用Node Version Manager，即+nvm+ 。一旦我们安装了 +nvm+ ，它将为我们处理所有依赖和更新。我们将遵循以下网址上的说明：
http://nvm.sh

一旦在您的操作系统上安装了 +nvm+ ，安装 +NodeJS+ 就很简单。我们使用 +--lts+ 标志告诉nvm我们需要最新的“长期支持（LTS）”版本的 +NodeJS+ 

----
$ nvm install --lts
----

确认你已经安装了 +node+ 和 +npm+ ：

----
$ node -v
v8.9.4
$ npm -v
5.6.0
----

看起来不错。现在安装Truffle：

----
$ npm -g install truffle

+ truffle@4.0.6
installed 1 package in 37.508s
----

[[truffle_project_directory]]
==== 创建Truffle项目目录

对于我们将使用Truffle的每个项目，我们创建一个项目目录并在该目录中初始化Truffle。Truffle将在我们的项目目录中创建必要的目录结构。习惯上，我们给项目目录一个描述我们项目的名称。对于这个例子，我们将使用Truffle从 <<simple_contract_example>> 部署我们的faucet合约，因此我们将命名项目文件夹 +Faucet+ 。

----
$ mkdir faucet
$ cd Faucet
Faucet $
----

一旦进入 +Faucet+ 目录，我们初始化Truffle：

----
Faucet $ truffle init
----

Truffle创建目录结构和一些默认文件：

----
Faucet
├── contracts
│   └── Migrations.sol
├── migrations
│   └── 1_initial_migration.js
├── test
├── truffle-config.js
└── truffle.js
----

除了Truffle本身之外，我们还将使用一些JavaScript（nodeJS）支持包。我们可以用npm安装这些。我们初始化npm目录结构并接受npm建议的默认值：

----
$ npm init

package name: (faucet)
version: (1.0.0)
description:
entry point: (truffle-config.js)
test command:
git repository:
keywords:
author:
license: (ISC)
About to write to Faucet/package.json:

{
  "name": "faucet",
  "version": "1.0.0",
  "description": "",
  "main": "truffle-config.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}


Is this ok? (yes)
----

现在，我们可以安装我们将用于使Truffle处理更容易的依赖关系：

----
$ npm install dotenv truffle-wallet-provider 以太坊js-wallet
----

您现在有一个带有几千个文件的 +node_modules+ 目录，位于您的Faucet目录中。

==== 配置Truffle

Truffle创建一些空的配置文件， +truffle.js+ 和 +truffle-config.js+ 。有两个配置文件，因为在Windows系统上，当您试图运行 +truffle+ 命令时， +truffle.js+ 名称可能会导致冲突，而Windows尝试运行 +truffle.js+ 。我们将删除 +truffle.js+ 并使用 +truffle-config.js+ 来支持Windows用户，他们毕竟已经受够了。

----
$ rm truffle.js
----

现在我们编辑truffle-config.js并用以下内容替换内容：

[[truffle_config]]
.truffle-config.js  - 一个让我们开始的Truffle配置
[source,javascript,linenums]
----
module.exports = {
	networks: {
		localnode: { // Whatever network our local node connects to
			network_id: "*", // Match any network id
			host: "localhost",
			port: 8545,
		}
	}
};
----

上面的配置是一个很好的起点。它设置了一个默认的以太坊网络(名为 +localnode+)，该网络假定您正在运行以太坊客户端（如Parity），既可以作为完整节点，也可以作为轻客户端。该配置将指示Truffle与端口8545上的本地节点通过RPC进行通信。Truffle将使用本地节点连接的任何以太网（如以太坊主网络）或测试网络（如Ropsten）。本地节点也将提供钱包功能。

在下面的章节中，我们将配置其他网络供Truffle使用，比如 +ganache+ test-RPC区块链和Infura（一个托管网络提供商）。随着我们添加更多网络，配置文件将变得更加复杂，但它也将为我们的测试和开发工作流程提供更多选择。

==== 使用Truffle来部署合约

我们现在有一个针对我们的 +Faucet+ 项目的基本工作目录，并且我们已经配置了Truffle和它的依赖关系。合约会保存在我们项目的 +contracts+ 子目录。该目录已经包含一个“helper”合约， +Migrations.sol+ 管理合约升级。我们将在后面的章节中研究 +Migrations.sol+ 的使用。

让我们将 +Faucet.sol+ 合约（从 <<solidity_faucet_example>> ）复制到 +contracts+ 子目录中，以便项目目录如下所示：

----
Faucet
├── contracts
│   ├── Faucet.sol
│   └── Migrations.sol
...
----

我们现在可以要求Truffle为我们编制合约：

----
$ truffle compile
Compiling ./contracts/Faucet.sol...
Compiling ./contracts/Migrations.sol...
Writing artifacts to ./build/contracts
----

==== Truffle迁移 - 了解部署脚本

Truffle提供了一个名为 _migration_ 的部署系统。如果您曾在其他框架中工作过，您可能会看到类似的东西：Ruby on Rails、Python Django和许多其他语言和框架都有 +migrate+ 命令。

在所有这些框架中，迁移的目的是处理不同版本软件之间数据模式的变化。以太坊迁移的目的略有不同。因为以太坊合约是不可变的，而且要部署成本，所以Truffle提供了一个迁移机制来跟踪哪些合约（以及哪些版本）已经部署。在一个拥有数十个合约和复杂依赖关系的复杂项目中，您不希望必须支付重新部署尚未更改的合约。您也不想手动跟踪哪些版本已经部署了哪些合约。Truffle迁移机制通过部署智能合约 +Migrations.sol+ 完成所有这些工作，然后跟踪所有其他合约部署。

我们只有一份合约， +Faucet.sol+ ，这意味着迁移系统是过度的。不幸的是，我们必须使用它。但是，通过学习如何将它用于一个合约，我们可以开始为我们的开发工作流练习一些良好的习惯。随着事情变得更加复杂，这项努力将会得到回报。

Truffle的 +migrations+ 目录是找到迁移脚本的地方。现在，只有一个脚本 +1_initial_migration.js+ ，它会部署 +Migrations.sol+ 合约本身：

[[1_initial_migration]]
.1_initial_migration.js  -  Migrations.sol的迁移脚本
[source,javascript,linenums]
----
include::code/Faucet/migrations/1_initial_migration.js
----

我们需要第二个迁移脚本来部署 +Faucet.sol+ 。我们称之为 +2_deploy_contracts.js+ 。它非常简单，就像 +1_initial_migration.js+ 一样，只需稍作修改即可。事实上，您可以复制 +1_initial_migration.js+ 的内容，并简单地将 +Migrations+ 的所有实例替换为 +Faucet+ ：

[[2_deploy_contracts]]
.2_deploy_contracts.js  -  Faucet.sol的迁移脚本
[source,javascript,linenums]
----
include::code/Faucet/migrations/2_deploy_contracts.js
----

该脚本初始化变量 +Faucet+ ，将 +Faucet.sol+  Solidity源代码标识为定义 +Faucet+ 的工件。然后，它调用部署功能来部署此合约。

我们都准备好了。我们使用 +truffle migrate+ 来部署合约。我们必须使用 +-- network+ 参数指定在哪个网络上部署合约。我们只在配置文件中指定了一个网络，我们将其命名为 +localnode+。确保您的本地以太坊客户端正在运行，然后输入：

----
Faucet $ truffle migrate --network localnode
----

因为我们使用本地节点连接到以太坊网络并管理我们的钱包，所以我们必须授权Truffle创建的交易。我正在运行 +parity+ 连接到Ropsten测试区块链，因此在Truffle迁移期间，我会在parity的Web控制台上看到一个弹出窗口：

[[parity_deployment_confirmation]]
.Parity要求确认部署Faucet
image::images/parity_deployment_confirmation.png["Parity asking for confirmation to deploy Faucet"]

你会看到总计四笔交易。一个部署 +Migrations+ ，一个用于将部署计数器更新为 +1+ ，一个用于部署 +Faucet+ ，另一个用于将部署计数器更新为 +2+ 。

Truffle将显示完成的迁移，显示每个交易并显示合约地址：

----
$ truffle migrate --network localnode
Using network 'localnode'.

Running migration: 1_initial_migration.js
  Deploying Migrations...
  ... 0xfa090db179d023d2abae543b4a21a1479e70ca7d35a469a5d1a98bfc6bd80fe8
  Migrations: 0x8861c27715550bed8362c0345add158489df6db0
Saving successful migration to network...
  ... 0x985c4a32716826ddbe4eae284104bef8bc69e959899f62246a1b27c9dfcd6c03
Saving artifacts...
Running migration: 2_deploy_contracts.js
  Deploying Faucet...
  ... 0xecdbeef77f0558edc689440e34b7bba0a3ba7a45e4b680b071b47c30a930e9d6
  Faucet: 0xd01cd8e7bd29e4bff8c1693f59eee46137a9f300
Saving successful migration to network...
  ... 0x11f376bd7307edddfd40dc4a14c3f7cb84b6c921ac2465602060b67d08f9fd8a
Saving artifacts...
----

==== 使用Truffle控制台

Truffle提供了一个JavaScript控制台，我们可以使用这个控制台与以太坊网络进行交互（通过本地节点），与已部署的合约交互以及与钱包提供商交互。在我们当前的配置 (+localnode+) 中，节点和钱包提供商是我们的本地parity客户端。

让我们开始Truffle控制台并尝试一些命令：

----
$ truffle console --network localnode
truffle(localnode)>
----

Truffle呈现提示，显示选定的网络配置 (+localnode+) 。记住并了解我们正在使用哪个网络很重要。您不想在以太坊主网络上意外部署测试合约或进行交易。这可能是一个昂贵的错误！

Truffle控制台提供了自动完成功能，使我们可以轻松探索环境。如果我们在部分完成的命令后按 +Tab+ ，Truffle将为我们完成命令。如果有多个命令与我们的输入相匹配，按 +Tab+ 两次将显示所有可能的完成。事实上，如果我们在空提示上按两次 +Tab+ ，Truffle将列出所有命令：

----
truffle(localnode)>
Array Boolean Date Error EvalError Function Infinity JSON Math NaN Number Object RangeError ReferenceError RegExp String SyntaxError TypeError URIError decodeURI decodeURIComponent encodeURI encodeURIComponent eval isFinite isNaN parseFloat parseInt undefined

ArrayBuffer Buffer DataView Faucet Float32Array Float64Array GLOBAL Int16Array Int32Array Int8Array Intl Map Migrations Promise Proxy Reflect Set StateManager Symbol Uint16Array Uint32Array Uint8Array Uint8ClampedArray WeakMap WeakSet WebAssembly XMLHttpRequest _ assert async_hooks buffer child_process clearImmediate clearInterval clearTimeout cluster console crypto dgram dns domain escape events fs global http http2 https module net os path perf_hooks process punycode querystring readline repl require root setImmediate setInterval setTimeout stream string_decoder tls tty unescape url util v8 vm web3 zlib

__defineGetter__ __defineSetter__ __lookupGetter__ __lookupSetter__ __proto__ constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf
----

绝大多数钱包和节点相关功能由 +web3+ 对象提供，该对象是 +web3.js+ 库的一个实例。 +web3+ 对象将RPC接口抽象为我们的parity节点。您还会注意到两个熟悉名称的对象： +Migrations+ 和 +Faucet+ 。这些代表我们刚刚部署的合约。我们将使用Truffle控制台与合约进行交互。首先，让我们通过 +web3+ 对象检查我们的钱包：

----
truffle(localnode)> web3.eth.accounts
[ '0x9e713963a92c02317a681b9bb3065a8249de124f',
  '0xdb5dc1a13e3a55cf3b4587cd8d1e5fdeb6738145' ]
----

我们的parity客户端有两个钱包，里面有一些Ropsten上的测试ETH。 +web3.eth.accounts+ 属性包含所有帐户的列表。我们可以使用 +getBalance+ 函数检查第一个帐户的余额：

----
truffle(localnode)> web3.eth.getBalance(web3.eth.accounts[0]).toNumber()
191198572800000000
truffle(localnode)>
----

 +web3.js+ 是一个大型JavaScript库，通过提供者（如本地客户端）为以太坊系统提供全面的接口。我们将在 <<web3js>> 中更详细地研究 +web3.js+ 。现在让我们尝试与我们的合约进行交互：

----
truffle(localnode)> Faucet.address
'0xd01cd8e7bd29e4bff8c1693f59eee46137a9f300'
truffle(localnode)> web3.eth.getBalance(Faucet.address).toNumber()
0
truffle(localnode)>
----

接下来，我们将使用 +sendTransaction+ 发送一些测试ETH来资助 +Faucet+ 。请注意使用 +web3.toWei+ 为我们转换以太币单位。键入十八个零而不会犯错误既困难又危险，因此使用单位转换器来获取值总是更好。以下是我们发送交易的方式：

----
truffle(localnode)> web3.eth.sendTransaction({from:web3.eth.accounts[0], to:Faucet.address, value:web3.toWei(0.5, 'ether')});
'0xf134c75b985dc0e0c27c2f0412251e0860eb530a5055e660f21e7483ab336808'
----

切换到 +parity+ 的Web控制台，您将看到一个弹出窗口，要求您确认该交易。等一下，一旦交易开始，您将能够看到我们的 +Faucet+ 合约的余额：

----
truffle(localnode)> web3.eth.getBalance(Faucet.address).toNumber()
500000000000000000
----

现在我们来调用 +withdraw+ 函数，从Faucet中提取一些测试ETH：

----
truffle(localnode)> Faucet.deployed().then(instance => {instance.withdraw(web3.toWei(0.1, 'ether'))}).then(console.log)
----

同样，您需要批准parityWeb控制台中的交易。 +Faucet+ 的余额已经下降，我们的测试钱包已经收到 +0.1+ 以太币：

----
truffle(localnode)> web3.eth.getBalance(Faucet.address).toNumber()
400000000000000000
----


----
truffle(localnode)> Faucet.deployed().then(instance => {instance.withdraw(web3.toWei(1, 'ether'))})
----

----
StatusError: Transaction: 0xe147ae9e3610334ada8d863c9028c12bd0501be2d0cfd05865c18612b92d3f9c exited with an error (status 0).
----

=== Embark

Github链接; https://github.com/iurimatias/embark-framework

阅读文档链接; https://embark.readthedocs.io/en/2.6.4/

+npm+ 包存储库链接; https://www.npmjs.com/package/embark

----
$ npm -g install embark
----

=== OpenZeppelin
OpenZeppelin是Solidity语言中的一个开放式可重用和安全智能合约框架。
OpenZeppelin与Truffle集成得很好

Github链接; https://github.com/OpenZeppelin

网站链接; https://openzeppelin.org/

阅读文档链接; http://zeppelin-solidity.readthedocs.io/en/latest/index.html

=== ZeppelinOS
zeppelin_os是EVM之上的开源分布式工具和服务平台，用于安全地开发和管理智能合约应用程序。

Github链接; https://github.com/zeppelinos

网站链接; https://zeppelinos.org

== 实用程序

=== ethereumJS helpeth：一个命令行工具

helpeth是一个用于键和交易处理的命令行工具，使开发人员的工作变得更容易。

它是ethereumjs基于JavaScript的库和工具集合的一部分。

https://github.com/ethereumjs/helpeth

----
Usage: helpeth [command]

Commands:
  signMessage <message>                     Sign a message
  verifySig <hash> <sig>                    Verify signature
  verifySigParams <hash> <r> <s> <v>        Verify signature parameters
  createTx <nonce> <to> <value> <data>      Sign a transaction
  <gasLimit> <gasPrice>
  assembleTx <nonce> <to> <value> <data>    Assemble a transaction from its
  <gasLimit> <gasPrice> <v> <r> <s>         components
  parseTx <tx>                              Parse raw transaction
  keyGenerate [format] [icapdirect]         Generate new key
  keyConvert                                Convert a key to V3 keystore format
  keyDetails                                Print key details
  bip32Details <path>                       Print key details for a given path
  addressDetails <address>                  Print details about an address
  unitConvert <value> <from> <to>           Convert between Ethereum units

Options:
  -p, --private      Private key as a hex string                        [string]
  --password         Password for the private key                       [string]
  --password-prompt  Prompt for the private key password               [boolean]
  -k, --keyfile      Encoded key file                                   [string]
  --show-private     Show private key details                          [boolean]
  --mnemonic         Mnemonic for HD key derivation                     [string]
  --version          Show version number                               [boolean]
  --help             Show help                                         [boolean]
----

=== dapp.tools

https://dapp.tools/

安装:
----
$ curl https://nixos.org/nix/install | sh
$ nix-channel --add https://nix.dapphub.com/pkgs/dapphub
$ nix-channel --update
$ nix-env -iA dapphub.{dapp,seth,hevm,evmdis}
----

==== Dapp
https://dapp.tools/dapp/

==== Seth
https://dapp.tools/seth/

==== Hevm
https://dapp.tools/hevm/

== 库

=== web3.js

web3.js是以太坊兼容的JS API，用于通过由以太坊基金会开发的JSON RPC与客户端进行通信。

Github链接; https://github.com/ethereum/web3.js

+npm+ 包存储库链接; https://www.npmjs.com/package/web3

文档链接为web3.js API 0.2xx; https://github.com/ethereum/wiki/wiki/JavaScript-API

文件链接为web3.js API 1.0.0-beta.xx; https://web3js.readthedocs.io/en/1.0/web3.html

=== web3.py

web3.py是一个用于与以太坊区块链进行交互的Python库。它现在也住在以太坊基金会的GitHub中。

Github链接; https://github.com/ethereum/web3.py

PyPi链接; https://pypi.python.org/pypi/web3/4.0.0b9

文件链接; https://web3py.readthedocs.io/

=== EthereumJS

以太坊的一系列库和实用工具。

Github链接; https://github.com/ethereumjs

网站链接; https://ethereumjs.github.io/

=== web3j

web3j是Java和Android库，用于与以太坊客户端集成并使用智能合约。

Github链接; https://github.com/web3j/web3j

网站链接; https://web3j.io

文件链接; https://docs.web3j.io

== Nethereum

Nethereum是以太坊的.Net集成库。

Github链接; https://github.com/Nethereum/Nethereum

网站链接; http://nethereum.com/

文件链接; https://nethereum.readthedocs.io/en/latest/

=== ethers.js

ethers.js库是一个完整的、功能齐全的、经过广泛测试的以太坊库，完全根据MIT许可证获得许可，并已获得以太坊基金会提供的用于扩展和维护的DevEx授予。

GitHub链接：https://github.com/ethers-io/ethers.js

文档：https://docs.ethers.io
